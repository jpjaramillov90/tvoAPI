// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace tvo.Infraestructura.AccesoDatos;

public partial class db_tvoContext : DbContext
{
    public db_tvoContext()
    {
    }

    public db_tvoContext(DbContextOptions<db_tvoContext> options)
        : base(options)
    {
    }

    public virtual DbSet<brands> brands { get; set; }

    public virtual DbSet<budget> budget { get; set; }

    public virtual DbSet<budgetStatement> budgetStatement { get; set; }

    public virtual DbSet<client> client { get; set; }

    public virtual DbSet<clientStatus> clientStatus { get; set; }

    public virtual DbSet<cooperative> cooperative { get; set; }

    public virtual DbSet<employee> employee { get; set; }

    public virtual DbSet<models> models { get; set; }

    public virtual DbSet<orderDetails> orderDetails { get; set; }

    public virtual DbSet<orderStatus> orderStatus { get; set; }

    public virtual DbSet<rolEmployee> rolEmployee { get; set; }

    public virtual DbSet<servicePrice> servicePrice { get; set; }

    public virtual DbSet<servicePriceHistory> servicePriceHistory { get; set; }

    public virtual DbSet<services> services { get; set; }

    public virtual DbSet<specialties> specialties { get; set; }

    public virtual DbSet<transport> transport { get; set; }

    public virtual DbSet<transportData> transportData { get; set; }

    public virtual DbSet<workOrder> workOrder { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=JOAOJV;Initial Catalog=db_tvo;Persist Security Info=True;User ID=sa;Password=Angul4r23");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<brands>(entity =>
        {
            entity.HasKey(e => e.idBrands).HasName("PK_Brands");

            entity.Property(e => e.brand)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
        });

        modelBuilder.Entity<budget>(entity =>
        {
            entity.HasKey(e => e.idBudget).HasName("PK_Budget");

            entity.Property(e => e.comments)
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.issueDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.validUntil).HasDefaultValueSql("(dateadd(day,(15),getdate()))");

            entity.HasOne(d => d.idBrandsNavigation).WithMany(p => p.budget)
                .HasForeignKey(d => d.idBrands)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Budget_Brands_idBrands");

            entity.HasOne(d => d.idBudgetStatementNavigation).WithMany(p => p.budget)
                .HasForeignKey(d => d.idBudgetStatement)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Budget_BudgetStatement_idBudgetStatement");

            entity.HasOne(d => d.idTransportDataNavigation).WithMany(p => p.budget)
                .HasForeignKey(d => d.idTransportData)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Budget_TransportData_idTransportData");

            entity.HasOne(d => d.idWorkOrderNavigation).WithMany(p => p.budget)
                .HasForeignKey(d => d.idWorkOrder)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Budget_WorkOrder_idWorkOrder");
        });

        modelBuilder.Entity<budgetStatement>(entity =>
        {
            entity.HasKey(e => e.idBudgetStatement).HasName("PK_BudgetStatement");

            entity.Property(e => e.descriptionStatement)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
        });

        modelBuilder.Entity<client>(entity =>
        {
            entity.HasKey(e => e.idClient).HasName("PK_Client");

            entity.HasIndex(e => e.nui, "UQ_Client_NUI").IsUnique();

            entity.Property(e => e.addressClient)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.firstName)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.lastName)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.mail)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.nui)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.passwordClient)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.phone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.idClientStatusNavigation).WithMany(p => p.client)
                .HasForeignKey(d => d.idClientStatus)
                .HasConstraintName("FK_Client_ClientStatus_idClientStatus");
        });

        modelBuilder.Entity<clientStatus>(entity =>
        {
            entity.HasKey(e => e.idClientStatus).HasName("PK_ClientStatus");

            entity.Property(e => e.clientStatus1)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("clientStatus");
        });

        modelBuilder.Entity<cooperative>(entity =>
        {
            entity.HasKey(e => e.idCooperative).HasName("PK_Cooperative");

            entity.Property(e => e.nameCooperative)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
        });

        modelBuilder.Entity<employee>(entity =>
        {
            entity.HasKey(e => e.idEmployee).HasName("PK_Employee");

            entity.Property(e => e.addressEmp)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.firstName)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.lastName)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.mail)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.nui)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.phone)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);

            entity.HasOne(d => d.idRolEmployeeNavigation).WithMany(p => p.employee)
                .HasForeignKey(d => d.idRolEmployee)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Employee_RolEmployee_idRolEmployee");

            entity.HasOne(d => d.idSpecialtiesNavigation).WithMany(p => p.employee)
                .HasForeignKey(d => d.idSpecialties)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Employee_Specialties_idSpecialties");
        });

        modelBuilder.Entity<models>(entity =>
        {
            entity.HasKey(e => e.idModels).HasName("PK_Models");

            entity.Property(e => e.models1)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("models");

            entity.HasOne(d => d.idBrandsNavigation).WithMany(p => p.models)
                .HasForeignKey(d => d.idBrands)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Models_Brands_idBrands");
        });

        modelBuilder.Entity<orderDetails>(entity =>
        {
            entity.HasKey(e => e.idOrderDetails).HasName("PK_OrderDetails");

            entity.HasOne(d => d.idServiceNavigation).WithMany(p => p.orderDetails)
                .HasForeignKey(d => d.idService)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OrderDetails_Services_idService");

            entity.HasOne(d => d.idWorkOrderNavigation).WithMany(p => p.orderDetails)
                .HasForeignKey(d => d.idWorkOrder)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OrderDetails_WorkOrder_idWorkOrder");
        });

        modelBuilder.Entity<orderStatus>(entity =>
        {
            entity.HasKey(e => e.idOrderStatus).HasName("PK_OrderStatus");

            entity.Property(e => e.orderStatus1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("orderStatus");
        });

        modelBuilder.Entity<rolEmployee>(entity =>
        {
            entity.HasKey(e => e.idRolEmployee).HasName("PK_RolEmployee");

            entity.Property(e => e.descriptionRol)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<servicePrice>(entity =>
        {
            entity.HasKey(e => e.idServicePrice).HasName("PK_ServicePrice");

            entity.ToTable(tb => tb.HasTrigger("trg_ins_servicePriceHistory"));

            entity.Property(e => e.price).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.idServiceNavigation).WithMany(p => p.servicePrice)
                .HasForeignKey(d => d.idService)
                .HasConstraintName("FK_ServicePrice_Services_idService");
        });

        modelBuilder.Entity<servicePriceHistory>(entity =>
        {
            entity.HasKey(e => e.idServicePriceHistory).HasName("PK_ServicePriceHistory");

            entity.Property(e => e.changeBy)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.endDate).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.startDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.idServicePriceNavigation).WithMany(p => p.servicePriceHistory)
                .HasForeignKey(d => d.idServicePrice)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ServicePriceHistory_ServicePrice_idServicePrice");
        });

        modelBuilder.Entity<services>(entity =>
        {
            entity.HasKey(e => e.idService).HasName("PK_Services");

            entity.Property(e => e.descriptionServices)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
        });

        modelBuilder.Entity<specialties>(entity =>
        {
            entity.HasKey(e => e.idSpecialties).HasName("PK_Specialties");

            entity.Property(e => e.specialty)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<transport>(entity =>
        {
            entity.HasKey(e => e.idTransport).HasName("PK_Transport");

            entity.Property(e => e.typeTransport)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<transportData>(entity =>
        {
            entity.HasKey(e => e.idTransportData).HasName("PK_TransportData");

            entity.Property(e => e.chassis)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.plate)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.idClientNavigation).WithMany(p => p.transportData)
                .HasForeignKey(d => d.idClient)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TransportData_Client_idClient");

            entity.HasOne(d => d.idCooperativeNavigation).WithMany(p => p.transportData)
                .HasForeignKey(d => d.idCooperative)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TransportData_Cooperative_idCooperative");

            entity.HasOne(d => d.idTransportNavigation).WithMany(p => p.transportData)
                .HasForeignKey(d => d.idTransport)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TransportData_Transport_idTransport");
        });

        modelBuilder.Entity<workOrder>(entity =>
        {
            entity.HasKey(e => e.idWorkOrder).HasName("PK_WorkOrder");

            entity.Property(e => e.descriptionWO)
                .HasMaxLength(45)
                .IsUnicode(false);

            entity.HasOne(d => d.idEmployeeNavigation).WithMany(p => p.workOrder)
                .HasForeignKey(d => d.idEmployee)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WorkOrder_Employee_idEmployee");

            entity.HasOne(d => d.idOrderStatusNavigation).WithMany(p => p.workOrder)
                .HasForeignKey(d => d.idOrderStatus)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WorkOrder_OrderStatus_idOrderStatus");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}